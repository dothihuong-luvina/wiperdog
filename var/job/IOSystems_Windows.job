JOB = [name:"IOSystems_Windows"]

FETCHACTION = {
	def command = [type:"wmic",commandStr:"path Win32_PerfRawData_PerfDisk_PhysicalDisk Get DiskTransfersPerSec,DiskReadsPerSec,DiskWritesPerSec,DiskBytesPerSec,DiskReadBytesPerSec,DiskWriteBytesPerSec,SplitIOPerSec /format:csv"]
	def procData = procRunner.procExecute(command,true)
	//get output data
	def output = procData.out
	def checkHeader = false
	def headers = []
	def rawData = []
	def tmpData
	def listData = []
	//process raw data
	output.eachLine{
		if(!checkHeader){
			if(it.trim() != "") {
				headers = (it.split(",") as List)
				checkHeader = true
			}
		} else {
			if(it.trim() != "") {
				rawData.add((it.split(",") as List))
			}
		}
	}
	//get list data final
	rawData.each{
		tmpData = [:]
		for(int i=1; i < headers.size(); i++){
			def data = it[i].toLong()
			if(headers[i] == "DiskBytesPersec"){
				tmpData["DiskBytesVal"] = data
			}
			if(headers[i] == "DiskReadBytesPersec"){
				tmpData["DiskReadBytesVal"] = data
			}
			if(headers[i] == "DiskReadsPersec"){
				tmpData["DiskReadsVal"] = data
			}
			if(headers[i] == "DiskTransfersPersec"){
				tmpData["DiskTransfersVal"] = data
			}
			if(headers[i] == "DiskWriteBytesPersec"){
				tmpData["DiskWriteBytesVal"] = data
			}
			if(headers[i] == "DiskWritesPersec"){
				tmpData["DiskWritesVal"] = data
			}
			if(headers[i] == "SplitIOPerSec"){
				tmpData["SplitIOVal"] = data
			}
		}
		listData.add(tmpData)
	}
	listData.remove(0)
	return listData
}

KEYEXPR = ['_sequence':['DiskTransfersVal','DiskReadsVal','DiskWritesVal']]
KEYEXPR._unit = ["DiskBytesVal":"byte/sec", "DiskReadBytesVal":"byte/sec", "DiskReadsVal":"byte/sec", "DiskTransfersPersec":"byte/sec", "DiskWriteBytesPersec":"byte/sec", "DiskWritesPersec":"byte/sec", "SplitIOPerSec":"byte/sec"]
KEYEXPR._chart = [
	[
        "type": "line",
        "name": "IO Systems",
        "chart_columns": ["DiskReadBytesVal", "DiskWriteBytesVal", "SplitIOVal", "DiskTransfersVal"]
    ]
]

SENDTYPE = "Store"
RESOURCEID = "Windows/IOSystems"
DEST = parameters.dest
OSINFO = parameters.osinfo
MONITORINGTYPE = 'OS'