JOB = [name:"Memory_Usage_Windows"]
FETCHACTION = {
	def cmdGetPhysMem= [type:"wmic",commandStr:"OS GET FreePhysicalMemory,TotalVisibleMemorySize /format:csv"]
	def dataPhysMem =  procRunner.procExecute(cmdGetPhysMem,true).out
	def checkHeader = false
	def headers = []
	def rawData = []
	//process raw data
	dataPhysMem.eachLine{
		if(!checkHeader){
			if(it.trim() != "") {
				headers = (it.split(",") as List)
				checkHeader = true
			}
		} else {
			if(it.trim() != "") {
				rawData.add((it.split(",") as List))
			}
		}
	}
   def listData = []
   //Merge headers and data
   rawData.each {
		def elemData = [:]
		def data = [:]
		for(int i = 1 ; i < it.size() ; i++ ){			
			try{
				elemData[headers[i]] = it[i].toLong()
			} catch(Exception ex){
				elemData[headers[i]] = it[i]
			}
			
		}
		data["TotalMemorySizeKB"] = elemData["TotalVisibleMemorySize"]
		data["FreeMemorySizeKB"] = elemData["FreePhysicalMemory"]
		data["UsedMemorySizeKB"] = elemData["TotalVisibleMemorySize"] - elemData["FreePhysicalMemory"]
		data["UsedMemoryPct"] = Math.round(data["UsedMemorySizeKB"]/data["TotalMemorySizeKB"]*100)
		
		listData.add(data)
   }
   return listData
}
KEYEXPR = [_sequence:["FreeMemorySizeKB","UsedMemorySizeKB","UsedMemoryPct"]]
KEYEXPR._unit = [ "FreeMemorySizeKB" : "KB", "UsedMemorySizeKB": "KB", "UsedMemoryPct" : "%" ]
KEYEXPR._chart = [
	[
		type:"line",
		name:"Memory Usage Windows",
		chart_columns:["UsedMemoryPct"]
	],
	[	
		type:"pie",
		name:"Memory Usage Windows",
		chart_column:["FreeMemorySizeKB","UsedMemorySizeKB"]
	] 
]
DEST = parameters.dest
OSINFO = parameters.osinfo
MONITORINGTYPE = 'OS'