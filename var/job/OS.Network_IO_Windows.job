/**
 * Monitoring I/O of network.<br/>
 * <p>
 * Display status of the currently active interfaces.<br/>
 * </p>
 * @targetVersion Windows Xp Professional, Version 2002, Service Pack 3
 * @return get information for network in use.
 * @returnParam NetworkCardName The name of the interface.
 * @returnParam PacketsReceivedCnt The number of packets have been received.
 * @returnParam PacketsSentCnt The number of packets have been sent.
 * @returnParam BytesReceivedVal The total amount of data have been received.
 * @returnParam BytesSentVal The total amount of data have been sent.
 */
JOB = [name:"OS.Network_IO_Windows"]
FETCHACTION = {
   def command = [type:"wmic",commandStr:"path Win32_PerfRawData_Tcpip_NetworkInterface Get Name,PacketsReceivedPersec,PacketsSentPersec,BytesReceivedPersec,BytesSentPersec /format:csv"]
   def procData = procRunner.procExecute(command,true)
   def output = procData.out
   def checkHeader = false
   def headers = []
   def rawData = []
   //process raw data
   output.eachLine{
		if(!checkHeader){
			if(it.trim() != "") {
				headers = (it.split(",") as List)
				checkHeader = true
			}
		} else {
			if(it.trim() != "") {
				rawData.add((it.split(",") as List))
			}
		}
   }
   //remove redundant data 
   headers.remove(0)
    rawData.each{
		it.remove(0)
   }
   def resultData = []
   //Merge headers and data
   rawData.each {
		def elemData = [:]
		for(int i = 0; i < it.size(); i++ ){
			try	{
				elemData[headers[i]] = it[i].toLong()
			} catch(NumberFormatException  ex){
				if(headers[i] == "Name"){
					headers[i] = "NetworkCardName"
				}
				elemData[headers[i]] = it[i]
			}
		}
    def tmpElemData = [:]
    tmpElemData['NetworkCardName'] = elemData['NetworkCardName']
    tmpElemData['PacketsReceivedCnt'] = elemData['PacketsReceivedPersec']
    tmpElemData['PacketsSentCnt'] = elemData['PacketsSentPersec']
    tmpElemData['BytesReceivedVal'] = elemData['BytesReceivedPersec']
    tmpElemData['BytesSentVal'] = elemData['BytesSentPersec']
		resultData.add(tmpElemData)
   }
   //Merge listData and list device
   return resultData
}
ACCUMULATE = {
  assert interval != null, "First time, we cannot return meaningful values"
  if(prevOUTPUT != null) {
    OUTPUT.each { rec ->
      def checkExists = false
      prevOUTPUT.each { prevREC ->
        if (prevREC.NetworkCardName == rec.NetworkCardName) {
          // packets have been received.
          rec['DiffPacketsReceivedVal'] = rec['PacketsReceivedCnt'] - prevREC['PacketsReceivedCnt']
          rec['PacketsReceivedPerSecPct'] = rec['DiffPacketsReceivedVal'] / interval
          // packets have been sent.
          rec['DiffPacketsSentVal'] = rec['PacketsSentCnt'] - prevREC['PacketsSentCnt']
          rec['PacketsSentPerSecPct'] = rec['DiffPacketsSentVal'] / interval
          // total packets have been received.
          rec['DiffBytesReceivedVal'] = rec['BytesReceivedVal'] - prevREC['BytesReceivedVal']
          rec['BytesReceivedPerSecPct'] = rec['DiffBytesReceivedVal'] / interval
          // total packets have been sent.
          rec['DiffBytesSentVal'] = rec['BytesSentVal'] - prevREC['BytesSentVal']
          rec['BytesSentPerSecPct'] = rec['DiffBytesSentVal'] / interval
          checkExists = true
        }
      }
      if(!checkExists) {
        // packets have been received.
        rec['DiffPacketsReceivedVal'] = rec['PacketsReceivedCnt']
        rec['PacketsReceivedPerSecPct'] = rec['PacketsReceivedCnt'] / interval
        // packets have been sent.
        rec['DiffPacketsSentVal'] = rec['PacketsSentCnt'] 
        rec['PacketsSentPerSecPct'] = rec['PacketsSentCnt'] / interval
        // total packets have been received.
        rec['DiffBytesReceivedVal'] = rec['BytesReceivedVal']
        rec['BytesReceivedPerSecPct'] = rec['DiffBytesReceivedVal'] / interval
        // total packets have been sent.
        rec['DiffBytesSentVal'] = rec['BytesSentVal']
        rec['BytesSentPerSecPct'] = rec['DiffBytesSentVal'] / interval
      }
    }
  }
}

KEYEXPR = [_root:["NetworkCardName"] , _sequence:["PacketsReceivedCnt","BytesReceivedVal"]]
KEYEXPR._unit = [
    "PacketsReceivedCnt" : "count", "DiffPacketsReceivedVal": "count", "PacketsReceivedPerSecPct": "count/sec",
    "PacketsSentCnt":"count", "DiffPacketsSentVal": "count", "PacketsSentPerSecPct": "count/sec",
    "BytesReceivedCnt":"byte", "DiffBytesReceivedVal": "byte", "BytesReceivedPerSecPct": "byte/sec",
    "BytesSentCnt":"byte", "DiffBytesSentVal": "byte", "BytesSentPerSecPct": "byte/sec"
  ]
KEYEXPR._chart = [
    [
        "type": "line",
        "name": "Network I/O Windows - Packets transfering ",
        "chart_columns": ["DiffPacketsReceivedVal", "DiffPacketsSentVal"]
    ],
    [
        "type": "line",
        "name": "Network I/O Windows - Bytes transfering ",
        "chart_columns": ["DiffBytesReceivedVal", "DiffBytesSentVal"]

    ]
]
SENDTYPE = "Store"
RESOURCEID = "Windows/NetworkIO"
DEST = parameters.dest
OSINFO = parameters.osinfo
MONITORINGTYPE = '@OS'